package com.meera.dbservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.dbservice.model.Field;
import com.meera.dbservice.model.FieldModel;
import com.meera.dbservice.model.FieldSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Field service. Represents a row in the &quot;LS_Field&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.dbservice.model.FieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FieldImpl}.
 * </p>
 *
 * @author LiferayFarmer
 * @see FieldImpl
 * @see com.meera.dbservice.model.Field
 * @see com.meera.dbservice.model.FieldModel
 * @generated
 */
@JSON(strict = true)
public class FieldModelImpl extends BaseModelImpl<Field> implements FieldModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a field model instance should use the {@link com.meera.dbservice.model.Field} interface instead.
     */
    public static final String TABLE_NAME = "LS_Field";
    public static final Object[][] TABLE_COLUMNS = {
            { "fieldId", Types.BIGINT },
            { "areaId", Types.BIGINT },
            { "fieldName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table LS_Field (fieldId LONG not null primary key,areaId LONG,fieldName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table LS_Field";
    public static final String ORDER_BY_JPQL = " ORDER BY field.fieldId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY LS_Field.fieldId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.meera.dbservice.model.Field"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.meera.dbservice.model.Field"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.meera.dbservice.model.Field"),
            true);
    public static long FIELDID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.meera.dbservice.model.Field"));
    private static ClassLoader _classLoader = Field.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Field.class };
    private long _fieldId;
    private long _originalFieldId;
    private boolean _setOriginalFieldId;
    private long _areaId;
    private String _fieldName;
    private long _columnBitmask;
    private Field _escapedModel;

    public FieldModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Field toModel(FieldSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Field model = new FieldImpl();

        model.setFieldId(soapModel.getFieldId());
        model.setAreaId(soapModel.getAreaId());
        model.setFieldName(soapModel.getFieldName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Field> toModels(FieldSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Field> models = new ArrayList<Field>(soapModels.length);

        for (FieldSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _fieldId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFieldId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fieldId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Field.class;
    }

    @Override
    public String getModelClassName() {
        return Field.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fieldId", getFieldId());
        attributes.put("areaId", getAreaId());
        attributes.put("fieldName", getFieldName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long fieldId = (Long) attributes.get("fieldId");

        if (fieldId != null) {
            setFieldId(fieldId);
        }

        Long areaId = (Long) attributes.get("areaId");

        if (areaId != null) {
            setAreaId(areaId);
        }

        String fieldName = (String) attributes.get("fieldName");

        if (fieldName != null) {
            setFieldName(fieldName);
        }
    }

    @JSON
    @Override
    public long getFieldId() {
        return _fieldId;
    }

    @Override
    public void setFieldId(long fieldId) {
        _columnBitmask = -1L;

        if (!_setOriginalFieldId) {
            _setOriginalFieldId = true;

            _originalFieldId = _fieldId;
        }

        _fieldId = fieldId;
    }

    public long getOriginalFieldId() {
        return _originalFieldId;
    }

    @JSON
    @Override
    public long getAreaId() {
        return _areaId;
    }

    @Override
    public void setAreaId(long areaId) {
        _areaId = areaId;
    }

    @JSON
    @Override
    public String getFieldName() {
        if (_fieldName == null) {
            return StringPool.BLANK;
        } else {
            return _fieldName;
        }
    }

    @Override
    public void setFieldName(String fieldName) {
        _fieldName = fieldName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Field.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Field toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Field) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FieldImpl fieldImpl = new FieldImpl();

        fieldImpl.setFieldId(getFieldId());
        fieldImpl.setAreaId(getAreaId());
        fieldImpl.setFieldName(getFieldName());

        fieldImpl.resetOriginalValues();

        return fieldImpl;
    }

    @Override
    public int compareTo(Field field) {
        int value = 0;

        if (getFieldId() < field.getFieldId()) {
            value = -1;
        } else if (getFieldId() > field.getFieldId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Field)) {
            return false;
        }

        Field field = (Field) obj;

        long primaryKey = field.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FieldModelImpl fieldModelImpl = this;

        fieldModelImpl._originalFieldId = fieldModelImpl._fieldId;

        fieldModelImpl._setOriginalFieldId = false;

        fieldModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Field> toCacheModel() {
        FieldCacheModel fieldCacheModel = new FieldCacheModel();

        fieldCacheModel.fieldId = getFieldId();

        fieldCacheModel.areaId = getAreaId();

        fieldCacheModel.fieldName = getFieldName();

        String fieldName = fieldCacheModel.fieldName;

        if ((fieldName != null) && (fieldName.length() == 0)) {
            fieldCacheModel.fieldName = null;
        }

        return fieldCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{fieldId=");
        sb.append(getFieldId());
        sb.append(", areaId=");
        sb.append(getAreaId());
        sb.append(", fieldName=");
        sb.append(getFieldName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.meera.dbservice.model.Field");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fieldId</column-name><column-value><![CDATA[");
        sb.append(getFieldId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>areaId</column-name><column-value><![CDATA[");
        sb.append(getAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fieldName</column-name><column-value><![CDATA[");
        sb.append(getFieldName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
